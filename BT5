// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    // Admin address
    address public admin;

    // Candidate structure
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
    }

    // Mapping to store candidates
    mapping(uint256 => Candidate) public candidates;

    // Array to store candidate IDs
    uint256[] public candidateIds;

    // Mapping to track voters
    mapping(address => bool) public voters;

    // Event to log votes
    event Voted(uint256 indexed candidateId);

    // Modifier to restrict access to admin
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    // Constructor to set the admin
    constructor() {
        admin = msg.sender;
    }

    // Function to add a candidate
    function addCandidate(uint256 _id, string memory _name) public onlyAdmin {
        require(candidates[_id].id == 0, "Candidate already exists");
        candidates[_id] = Candidate(_id, _name, 0);
        candidateIds.push(_id);
    }

    // Function to vote for a candidate
    function vote(uint256 _candidateId) public {
        require(!voters[msg.sender], "You have already voted");
        require(candidates[_candidateId].id != 0, "Invalid candidate");

        voters[msg.sender] = true;
        candidates[_candidateId].voteCount++;

        emit Voted(_candidateId);
    }

    // Function to get the total votes for a candidate
    function getVotes(uint256 _candidateId) public view returns (uint256) {
        require(candidates[_candidateId].id != 0, "Invalid candidate");
        return candidates[_candidateId].voteCount;
    }

    // Function to get all candidate IDs
    function getAllCandidates() public view returns (uint256[] memory) {
        return candidateIds;
    }
}
